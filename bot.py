import logging
import asyncio
import sqlite3
from datetime import datetime, timedelta
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.filters import Command

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Telegram API
API_ID = 21795781
API_HASH = "2afe1bb05ed87de2ac6149a11c3a060b"
BOT_TOKEN = "7638358320:AAHO6ylUTcEX8tr4_qsx_-l52b5a7ZuxRCg"

# –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# –ü—É—Ç—å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
db_path = "mylogist.db"

# –§–∏–ª—å—Ç—Ä —Å–æ–æ–±—â–µ–Ω–∏–π (—Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 –¥–Ω—è)
three_days_ago = datetime.now() - timedelta(days=3)

# –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
TRANSPORT_KEYWORDS = {"–º–æ—à–∏–Ω–∞ –±–æ—Ä", "—Ç–µ–Ω—Ç –±–æ—Ä", "—é–∫–∏ –±–æ—Ä–ª–∞—Ä", "mashina bor", "yuk bor"}
CARGO_KEYWORDS = {"—é–∫ –∫–µ—Ä–µ", "—é–∫ –∫–µ—Ä–∞–∫", "–≥—Ä—É–∑", "yuk kere", "yuk kerak"}

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
def get_db_connection():
    conn = sqlite3.connect(db_path)
    conn.execute('''CREATE TABLE IF NOT EXISTS cargo (
                        id INTEGER PRIMARY KEY AUTOINCREMENT,
                        origin TEXT NOT NULL,
                        destination TEXT NOT NULL,
                        transport_type TEXT,
                        weight TEXT,
                        details TEXT,
                        contact TEXT NOT NULL,
                        posted_date TIMESTAMP)''')
    conn.commit()
    return conn

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
def main_menu():
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(KeyboardButton(text="üöõ –ù–∞–π—Ç–∏ –≥—Ä—É–∑"))
    keyboard.add(KeyboardButton(text="üöö –ù–∞–π—Ç–∏ –º–∞—à–∏–Ω—É"))
    keyboard.add(KeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏"))
    keyboard.add(KeyboardButton(text="‚ÑπÔ∏è –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è"))
    return keyboard

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message(Command("start"))
async def start_handler(message: types.Message):
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –≥—Ä—É–∑–æ–≤ –∏ –º–∞—à–∏–Ω. –í–≤–µ–¥–∏—Ç–µ –º–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–¢–∞—à–∫–µ–Ω—Ç - –ú–æ—Å–∫–≤–∞').",
        reply_markup=main_menu()
    )

# –ü–æ–∏—Å–∫ –≥—Ä—É–∑–∞ –≤ –ë–î
@dp.message(lambda message: message.text == "üöõ –ù–∞–π—Ç–∏ –≥—Ä—É–∑")
async def search_cargo(message: types.Message):
    with get_db_connection() as conn:
        cursor = conn.cursor()
        cursor.execute("SELECT * FROM cargo WHERE posted_date >= ? ORDER BY id DESC LIMIT 5", (three_days_ago,))
        results = cursor.fetchall()

    if results:
        for cargo in results:
            text = (f"üöõ –ì—Ä—É–∑ –Ω–∞–π–¥–µ–Ω!\n\n"
                    f"üìç –û—Ç–∫—É–¥–∞: {cargo[1]}\n"
                    f"üìç –ö—É–¥–∞: {cargo[2]}\n"
                    f"üöö –¢–∏–ø: {cargo[3] if cargo[3] else '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
                    f"‚öñÔ∏è –í–µ—Å: {cargo[4] if cargo[4] else '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
                    f"\nüìû –ö–æ–Ω—Ç–∞–∫—Ç: {cargo[6]}")
            await message.answer(text)
    else:
        await message.answer("‚ùå –ì—Ä—É–∑—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!")

# –ü–æ–∏—Å–∫ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ –≤ –ë–î
@dp.message(lambda message: message.text == "üöö –ù–∞–π—Ç–∏ –º–∞—à–∏–Ω—É")
async def search_transport(message: types.Message):
    await message.answer("–§—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help
@dp.message(Command("help"))
async def help_handler(message: types.Message):
    await message.answer(
        "ü§ñ –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º:\n\n"
        "1Ô∏è‚É£ –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É üöõ –ù–∞–π—Ç–∏ –≥—Ä—É–∑, —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≥—Ä—É–∑—ã.\n"
        "2Ô∏è‚É£ –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É üöö –ù–∞–π—Ç–∏ –º–∞—à–∏–Ω—É, —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ —Å–≤–æ–±–æ–¥–Ω—ã–µ –º–∞—à–∏–Ω—ã.\n"
        "3Ô∏è‚É£ –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã, –Ω–∞–ø–∏—à–∏—Ç–µ —Å—é–¥–∞, –∏ —è –ø–æ–º–æ–≥—É! üòä"
    )

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
